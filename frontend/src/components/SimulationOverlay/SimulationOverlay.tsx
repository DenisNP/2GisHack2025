import React from 'react';
import { Box, Typography, CircularProgress } from '@mui/material';
import { keyframes } from '@mui/system';

// –°–æ–∑–¥–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –¥–ª—è –∫–∞–∂–¥–æ–π –ª–∏–Ω–∏–∏ —Å –µ–µ —Ä–µ–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω–æ–π
const createLineAnimation = (length: number) => keyframes`
  0% {
    stroke-dashoffset: ${length};
    opacity: 0;
  }
  5% {
    opacity: 0.15;
  }
  45% {
    stroke-dashoffset: 0;
    opacity: 0.15;
  }
  55% {
    stroke-dashoffset: 0;
    opacity: 0.15;
  }
  95% {
    stroke-dashoffset: ${-length};
    opacity: 0.15;
  }
  100% {
    stroke-dashoffset: ${-length};
    opacity: 0;
  }
`;

interface SimulationOverlayProps {
  isVisible: boolean;
}

// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –ª–∏–Ω–∏–∏-–¥–æ—Ä–æ–∂–∫–∏ –æ—Ç –∫—Ä–∞—è –¥–æ –∫—Ä–∞—è
const generatePathLines = () => {
  const lines = [];
  
  // –°–æ–∑–¥–∞–µ–º –±–æ–ª—å—à–µ –ª–∏–Ω–∏–π —Å –æ–¥–∏–Ω–∞–∫–æ–≤–æ–π —Å–∫–æ—Ä–æ—Å—Ç—å—é
  const lineCount = 15 + Math.floor(Math.random() * 10); // 15-25 –ª–∏–Ω–∏–π
  const uniformDuration = 18; // –û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å - 18 —Å–µ–∫—É–Ω–¥
  
  for (let i = 0; i < lineCount; i++) {
    let startX = 0, startY = 0, endX = 0, endY = 0;
    
    // –°–ª—É—á–∞–π–Ω–æ –≤—ã–±–∏—Ä–∞–µ–º —Å –∫–∞–∫–æ–≥–æ –∫—Ä–∞—è –Ω–∞—á–∏–Ω–∞—Ç—å
    const startEdge = Math.floor(Math.random() * 4); // 0=–≤–µ—Ä—Ö, 1=–ø—Ä–∞–≤–æ, 2=–Ω–∏–∑, 3=–ª–µ–≤–æ
    const endEdge = Math.floor(Math.random() * 4);
    
    // –°—Ç–∞—Ä—Ç–æ–≤–∞—è —Ç–æ—á–∫–∞ –Ω–∞ –∫—Ä–∞—é —ç–∫—Ä–∞–Ω–∞
    switch (startEdge) {
      case 0: // –≤–µ—Ä—Ö
        startX = Math.random() * 100;
        startY = 0;
        break;
      case 1: // –ø—Ä–∞–≤–æ
        startX = 100;
        startY = Math.random() * 100;
        break;
      case 2: // –Ω–∏–∑
        startX = Math.random() * 100;
        startY = 100;
        break;
      case 3: // –ª–µ–≤–æ
        startX = 0;
        startY = Math.random() * 100;
        break;
    }
    
    // –ö–æ–Ω–µ—á–Ω–∞—è —Ç–æ—á–∫–∞ –Ω–∞ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–æ–º –∏–ª–∏ —Å–æ—Å–µ–¥–Ω–µ–º –∫—Ä–∞—é
    switch (endEdge) {
      case 0: // –≤–µ—Ä—Ö
        endX = Math.random() * 100;
        endY = 0;
        break;
      case 1: // –ø—Ä–∞–≤–æ
        endX = 100;
        endY = Math.random() * 100;
        break;
      case 2: // –Ω–∏–∑
        endX = Math.random() * 100;
        endY = 100;
        break;
      case 3: // –ª–µ–≤–æ
        endX = 0;
        endY = Math.random() * 100;
        break;
    }
    
    // –ò–∑–±–µ–≥–∞–µ–º –ª–∏–Ω–∏–π –∏–∑ –æ–¥–Ω–æ–π —Ç–æ—á–∫–∏ –≤ —Ç—É –∂–µ —Ç–æ—á–∫—É
    if (startEdge === endEdge && Math.abs(startX - endX) + Math.abs(startY - endY) < 10) {
      continue;
    }
    
    const delay = Math.random() * 8; // –ö–æ—Ä–æ—Ç–∫–∏–µ –∑–∞–¥–µ—Ä–∂–∫–∏ –¥–æ 8 —Å–µ–∫—É–Ω–¥
    
    // –í—ã—á–∏—Å–ª—è–µ–º –¥–ª–∏–Ω—É –ª–∏–Ω–∏–∏ –¥–ª—è stroke-dasharray
    const deltaX = endX - startX;
    const deltaY = endY - startY;
    const length = Math.sqrt(deltaX * deltaX + deltaY * deltaY) * 15; // —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –º–∞—Å—à—Ç–∞–±
    
    lines.push({
      id: i,
      startX,
      startY,
      endX,
      endY,
      duration: uniformDuration, // –û–¥–∏–Ω–∞–∫–æ–≤–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å
      delay,
      length,
      strokeWidth: 2 + Math.random() * 3, // 2-5px - –±–æ–ª–µ–µ —Ç–æ–ª—Å—Ç—ã–µ –ª–∏–Ω–∏–∏
      opacity: 0.08 + Math.random() * 0.07, // 0.08-0.15 - –æ—á–µ–Ω—å –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–µ —Å–µ—Ä—ã–µ –ª–∏–Ω–∏–∏
    });
  }
  
  return lines;
};

export const SimulationOverlay: React.FC<SimulationOverlayProps> = ({ isVisible }) => {
  const pathLines = React.useMemo(() => generatePathLines(), []);

  return (
    <Box
      sx={{
        position: 'fixed',
        top: 0,
        left: 0,
        right: 0,
        bottom: 0,
        zIndex: 9999,
        background: 'rgba(0, 0, 0, 0.8)',
        display: isVisible ? 'flex' : 'none',
        flexDirection: 'column',
        alignItems: 'center',
        justifyContent: 'center',
        backdropFilter: 'blur(3px)',
        pointerEvents: isVisible ? 'all' : 'none',
      }}
    >
      {/* –£–±–∏—Ä–∞–µ–º Fade –∞–Ω–∏–º–∞—Ü–∏—é –¥–ª—è —Å—Ç–∞—Ç–∏—á–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è */}
      {isVisible && (
        <Box
          sx={{
            display: 'flex',
            flexDirection: 'column',
            alignItems: 'center',
            justifyContent: 'center',
            textAlign: 'center',
            opacity: 1, // –°—Ç–∞—Ç–∏—á–Ω–∞—è –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å
          }}
        >
          {/* –ü—Ä–æ—Å—Ç–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –±–µ–∑ –ª–∏—à–Ω–∏—Ö –∞–Ω–∏–º–∞—Ü–∏–π */}
          <Box sx={{ position: 'relative', mb: 4 }}>
            <CircularProgress
              size={80}
              thickness={3}
              sx={{
                color: '#64b5f6', // –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π —Å–∏–Ω–∏–π —Ü–≤–µ—Ç
                '& .MuiCircularProgress-circle': {
                  strokeLinecap: 'round',
                },
              }}
            />
          </Box>

          {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –±–µ–∑ –∞–Ω–∏–º–∞—Ü–∏–∏ */}
          <Typography
            variant="h4"
            sx={{
              color: 'white',
              fontWeight: 'bold',
              mb: 2,
              textShadow: '2px 2px 8px rgba(0,0,0,0.7)',
            }}
          >
            –°–∏–º—É–ª—è—Ü–∏—è –ø–µ—à–µ—Ö–æ–¥–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤
          </Typography>

          {/* –ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫ –±–µ–∑ —Ç–æ—á–µ–∫ */}
          <Typography
            variant="h6"
            sx={{
              color: 'rgba(255,255,255,0.9)',
              mb: 4,
              textShadow: '1px 1px 4px rgba(0,0,0,0.5)',
            }}
          >
            –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ...
          </Typography>

          {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –±–µ–∑ –∞–Ω–∏–º–∞—Ü–∏–∏ */}
          <Box
            sx={{
              display: 'flex',
              gap: 3,
              flexWrap: 'wrap',
              justifyContent: 'center',
              maxWidth: 600,
            }}
          >
            {[
              { icon: 'üö∂‚Äç‚ôÇÔ∏è', text: '–ê–Ω–∞–ª–∏–∑ –¥–≤–∏–∂–µ–Ω–∏—è' },
              { icon: 'üó∫Ô∏è', text: '–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–æ–Ω' },
              { icon: 'üìä', text: '–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–æ–≤' },
            ].map((item, index) => (
              <Box
                key={index}
                sx={{
                  background: 'rgba(100, 181, 246, 0.15) !important', // –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π —Å–∏–Ω–∏–π —Ñ–æ–Ω
                  borderRadius: 3,
                  padding: 2,
                  backdropFilter: 'blur(10px)',
                  border: '1px solid rgba(100, 181, 246, 0.3) !important', // –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π –±–æ—Ä–¥–µ—Ä
                  minWidth: 160,
                  // –û—Ç–∫–ª—é—á–∞–µ–º –ª—é–±—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–≤–µ—Ç–∞
                  transition: 'none !important',
                  '&:hover': {
                    background: 'rgba(100, 181, 246, 0.15) !important',
                    border: '1px solid rgba(100, 181, 246, 0.3) !important',
                  },
                  '&:focus': {
                    background: 'rgba(100, 181, 246, 0.15) !important',
                    border: '1px solid rgba(100, 181, 246, 0.3) !important',
                  },
                  '&:active': {
                    background: 'rgba(100, 181, 246, 0.15) !important',
                    border: '1px solid rgba(100, 181, 246, 0.3) !important',
                  },
                }}
              >
                <Typography
                  variant="h5"
                  sx={{ mb: 1, textAlign: 'center' }}
                >
                  {item.icon}
                </Typography>
                <Typography
                  variant="body2"
                  sx={{
                    color: 'rgba(255,255,255,0.9)',
                    textAlign: 'center',
                    fontWeight: 500,
                  }}
                >
                  {item.text}
                </Typography>
              </Box>
            ))}
          </Box>
        </Box>
      )}

      {/* –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ª–∏–Ω–∏–∏-–¥–æ—Ä–æ–∂–∫–∏ –≤ —Ñ–æ–Ω–µ */}
      {isVisible && (
        <Box
          component="svg"
          sx={{
            position: 'absolute',
            top: 0,
            left: 0,
            width: '100%',
            height: '100%',
            pointerEvents: 'none',
            zIndex: -1, // –ï—â–µ –≥–ª—É–±–∂–µ –≤ —Ñ–æ–Ω–µ
          }}
          viewBox="0 0 100 100"
          preserveAspectRatio="none"
        >
          {pathLines.map((line) => (
            <Box
              key={line.id}
              component="line"
              sx={{
                stroke: '#888888', // –°–µ—Ä—ã–π —Ü–≤–µ—Ç
                strokeWidth: `${line.strokeWidth / 5}`, // —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–æ–ª—â–∏–Ω—É –¥–ª—è viewBox
                strokeLinecap: 'round',
                fill: 'none',
                strokeDasharray: line.length,
                strokeDashoffset: line.length,
                animation: `${createLineAnimation(line.length)} ${line.duration}s linear infinite`,
                animationDelay: `${line.delay}s`,
                opacity: line.opacity,
              }}
              x1={line.startX}
              y1={line.startY}
              x2={line.endX}
              y2={line.endY}
            />
          ))}
        </Box>
      )}
    </Box>
  );
};